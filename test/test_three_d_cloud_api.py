# coding: utf-8

"""
    Aspose.3D Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

#from asposediagramcloud.apis.diagram_api import DiagramApi
#from asposediagramcloud.rest import ApiException
#import asposediagramcloud
import os
import sys
import unittest
import test_base
import shutil

LOCALDIR = os.path.abspath(os.path.realpath(os.path.dirname(__file__)) + "/../testData")
from aspose3dcloud.models import *

class TestThreeDApi(unittest.TestCase):
    """ ThreeDApi unit test stubs """

    def setUp(self):
        self.api = test_base.GetThreeDCloudApi()

    def tearDown(self):
        pass
    def test_Convert_By_SaveOption(self):
        #Convert by SaveOption
        name = "Aspose.pdf"
        newfilename = "saveasOpt.pdf"
        saveopt = HTMLSaveOption()
        #SaveFormat must be assigned
        saveopt.save_format=SaveFormat.HTML
        #saveopt.file_system=FileSystem()
        #saveopt.file_system.file_system_type=FileSystemType.MemoryFileSystem
        #posList = ["x", "y", "z"]
        #saveopt.position_components = posList
        newfilename = "saveasOpt22.html"
        folder = "3DTest"
        isOverwrite = "true"
        result=self.api.post_convert_by_opt(name,saveopt,newfilename,folder=folder,is_overwrite = isOverwrite)
        self.assertIsNotNone(result,"Convert by saveoption Error!")
        pass
"""
    def test_copy_file(self):




        #Copy file in the storage
        srcPath = "3DTest\\Aspose.pdf"
        destPath = "3DTest\\Aspose.Python.pdf"
        result=self.api.copy_file(srcPath,destPath)
        self.assertEqual(result.reason,'OK')
        self.assertEqual(result.status,200)
        pass  

    def test_download_file(self):
        #Download file to local from the storage
        srcPath = "3DTest\\Aspose.pdf"
        destPath = LOCALDIR + "\\Aspose.Download.pdf"
        result=self.api.download_file(srcPath)
        ret=shutil.copyfile(result,destPath)
        self.assertIsNotNone(ret,"Download file to local from the storage Error!")
        pass 

    def test_upload_file(self):
        #Upload file from local to the storage
        srcPath = LOCALDIR + "\\Aspose.Download.pdf"
        destPath = "3DTest"
        result=self.api.upload_file(destPath,srcPath)
        self.assertTrue(len(result.uploaded)>0)
        pass 

    def test_create_new_3D_file(self):
        #Create new 3D file
        format = "pdf"
        result=self.api.post_create(format)
        srcPath = "3DTest\\Aspose.pdf"
        destPath = LOCALDIR + "\\Aspose.New.pdf"
        ret=shutil.copyfile(result,destPath)
        self.assertIsNotNone(ret,"Create new file Error!")
        pass 
   
    def test_Convert_by_Format(self):
        #Convert by format parameter
        name = "oaptest.fbx"
        newformat = "pdf"
        newfilename = "oaptest.pdf"
        folder = "3DTest"
        isOverwrite = "true"
        storage = "First Storage"
        result=self.api.post_convert_by_format(name,newformat,newfilename,folder=folder,is_overwrite = isOverwrite)
        self.assertIsNotNone(result,"Convert by format parameter Error!")
        pass

    def test_Convert_By_SaveOption(self):
        #Convert by SaveOption
        name = "Aspose.pdf"
        newfilename = "saveasOpt.pdf"
        saveopt = HTMLSaveOption()
        #SaveFormat must be assigned
        saveopt.save_format=SaveFormat.HTML
        #saveopt.file_system=FileSystem()
        #saveopt.file_system.file_system_type=FileSystemType.MemoryFileSystem
        #posList = ["x", "y", "z"]
        #saveopt.position_components = posList
        newfilename = "saveasOpt22.html"
        folder = "3DTest"
        isOverwrite = "true"
        result=self.api.post_convert_by_opt(name,saveopt,newfilename,folder=folder,is_overwrite = isOverwrite)
        self.assertIsNotNone(result,"Convert by saveoption Error!")
        pass  

    def test_delete_Node(self):
        #Delete nodes in 3D file
        name = "oaptest.pdf"
        objectaddressingpath = "//*[(@Type = 'Camera') or (@Name = 'light')]"
        folder = "3DTest"
        storage = ""
        result=self.api.delete_nodes(name,objectaddressingpath)
        self.assertIsNotNone(result,"Delete nodes in 3D file Error!")
        pass 

    def test_Save_As_Part(self):
        #Save as part test
        name = "parttest.fbx"
        objectaddressingpath = "a1"
        newformat = "pdf"
        newfilename = "saveaspart.pdf"
        folder = "3DTest"
        isOverwrite = "true"
        storage = ""
        result=self.api.post_save_as_part(name,objectaddressingpath,newformat,newfilename,folder=folder,is_overwrite = isOverwrite)
        self.assertIsNotNone(result,"Save as part test Error!")
        pass

    def test_Save_PDF_Raw_Data(self):
        #Save raw data of pdf to file 
        name = "extracttest.pdf"
        multifileprefix = "rawdata"
        password = ""
        folder = "3DTest"
        storage = ""
        result=self.api.post_pdf_raw_data(name,multifileprefix,password=password,folder=folder,storage=storage)
        self.assertIsNotNone(result,"Save raw data of pdf to file Error!")
        pass

    def test_Save_PDF_Scene(self):
        #Save scene in pdf to file 
        name = "extracttest.pdf"
        multifileprefix = "newScene"
        newformat = "pdf"
        password = ""
        folder = "3DTest"
        storage = ""
        result=self.api.post_scene_to_file(name,multifileprefix,newformat=newformat,password=password,folder=folder,storage=storage)
        self.assertIsNotNone(result,"Save scene in pdf to file Error!")
        pass

    def test_Triangulate_To_Diff_File(self):
        #Triangulate whole file and save to different file 
        name = "triangulate.3ds"
        newfilename = "triangulateNew"
        newformat = "pdf"
        folder = "3DTest"
        storage = ""
        result=self.api.post_triangulate_new(name,newfilename,newformat,folder=folder,storage=storage)
        self.assertIsNotNone(result,"Triangulate whole file and save to different file Error!")
        pass

    def test_Triangulate_To_Original_File(self):
        #Triangulate whole file and save to original file
        name = "triangulate.3ds"
        folder = "3DTest"
        storage = ""
        result=self.api.post_triangulate_original(name,folder=folder,storage=storage)
        self.assertIsNotNone(result,"Triangulate whole file and save to original file Error!")
        pass

    def test_Model(self):
        #Create models in 3D file
        name = "3DTest\\Aspose.pdf"
        folder = ""
        newformat = "pdf"
        storage = ""
        modeldata = ModelData()
        modeldata.transform = Transform()
        modeldata.transform.translation = Vector3()
        modeldata.transform.translation.x = 100
        modeldata.transform.translation.y = 100
        modeldata.transform.translation.z = 100
        modeldata.entity=Entity()
        modeldata.entity.torus=Torus()
        modeldata.entity.torus.radius = 10
        modeldata.entity.torus.tube = 20
        modeldata.entity.torus.radial_segments = 10
        modeldata.entity.torus.tubular_segments = 10
        result=self.api.post_model(name,modeldata)
        self.assertIsNotNone(result,"Create models in 3D file Error!")
        pass 
"""
if __name__ == '__main__':
    unittest.main()
