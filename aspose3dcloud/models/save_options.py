# coding: utf-8

"""
    Aspose.ThreeD Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SaveOptions(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'save_format': 'SaveFormat',
        'lookup_paths': 'list[str]',
        'file_name': 'str',
        'file_format': 'str'
    }

    attribute_map = {
        'save_format': 'SaveFormat',
        'lookup_paths': 'LookupPaths',
        'file_name': 'FileName',
        'file_format': 'FileFormat'
    }
    
    @staticmethod
    def get_swagger_types():
        return SaveOptions.swagger_types
    
    @staticmethod
    def get_attribute_map():
        return SaveOptions.attribute_map
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, save_format=None, lookup_paths=None, file_name=None, file_format=None, **kw):
        """
        Associative dict for storing property values
        """
        self.container = {}
		    
        """
        SaveOptions - a model defined in Swagger
        """

        self.container['save_format'] = None
        self.container['lookup_paths'] = None
        self.container['file_name'] = None
        self.container['file_format'] = None

        if save_format is not None:
          self.save_format = save_format
        if lookup_paths is not None:
          self.lookup_paths = lookup_paths
        if file_name is not None:
          self.file_name = file_name
        if file_format is not None:
          self.file_format = file_format

    @property
    def save_format(self):
        """
        Gets the save_format of this SaveOptions.
        Gets or sets  of the SaveFormat.

        :return: The save_format of this SaveOptions.
        :rtype: SaveFormat
        """
        return self.container['save_format']

    @save_format.setter
    def save_format(self, save_format):
        """
        Sets the save_format of this SaveOptions.
        Gets or sets  of the SaveFormat.

        :param save_format: The save_format of this SaveOptions.
        :type: SaveFormat
        """

        self.container['save_format'] = save_format

    @property
    def lookup_paths(self):
        """
        Gets the lookup_paths of this SaveOptions.
        Some files like OBJ depends on external file, the lookup paths will allows Aspose.3D to look for external file to load

        :return: The lookup_paths of this SaveOptions.
        :rtype: list[str]
        """
        return self.container['lookup_paths']

    @lookup_paths.setter
    def lookup_paths(self, lookup_paths):
        """
        Sets the lookup_paths of this SaveOptions.
        Some files like OBJ depends on external file, the lookup paths will allows Aspose.3D to look for external file to load

        :param lookup_paths: The lookup_paths of this SaveOptions.
        :type: list[str]
        """

        self.container['lookup_paths'] = lookup_paths

    @property
    def file_name(self):
        """
        Gets the file_name of this SaveOptions.
        The file name of the exporting/importing scene. This is optional, but useful when serialize external assets like OBJ's material.

        :return: The file_name of this SaveOptions.
        :rtype: str
        """
        return self.container['file_name']

    @file_name.setter
    def file_name(self, file_name):
        """
        Sets the file_name of this SaveOptions.
        The file name of the exporting/importing scene. This is optional, but useful when serialize external assets like OBJ's material.

        :param file_name: The file_name of this SaveOptions.
        :type: str
        """

        self.container['file_name'] = file_name

    @property
    def file_format(self):
        """
        Gets the file_format of this SaveOptions.
        The file format,like FBX,U3D,PDF ....

        :return: The file_format of this SaveOptions.
        :rtype: str
        """
        return self.container['file_format']

    @file_format.setter
    def file_format(self, file_format):
        """
        Sets the file_format of this SaveOptions.
        The file format,like FBX,U3D,PDF ....

        :param file_format: The file_format of this SaveOptions.
        :type: str
        """

        self.container['file_format'] = file_format

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SaveOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
