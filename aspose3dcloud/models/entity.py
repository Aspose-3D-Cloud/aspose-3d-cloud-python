# coding: utf-8

"""
    Aspose.ThreeD Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Entity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'box': 'Box',
        'cylinder': 'Cylinder',
        'sphere': 'Sphere',
        'torus': 'Torus',
        'plane': 'Plane'
    }

    attribute_map = {
        'type': 'Type',
        'box': 'Box',
        'cylinder': 'Cylinder',
        'sphere': 'Sphere',
        'torus': 'Torus',
        'plane': 'Plane'
    }
    
    @staticmethod
    def get_swagger_types():
        return Entity.swagger_types
    
    @staticmethod
    def get_attribute_map():
        return Entity.attribute_map
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, type=None, box=None, cylinder=None, sphere=None, torus=None, plane=None, **kw):
        """
        Associative dict for storing property values
        """
        self.container = {}
		    
        """
        Entity - a model defined in Swagger
        """

        self.container['type'] = None
        self.container['box'] = None
        self.container['cylinder'] = None
        self.container['sphere'] = None
        self.container['torus'] = None
        self.container['plane'] = None

        if type is not None:
          self.type = type
        if box is not None:
          self.box = box
        if cylinder is not None:
          self.cylinder = cylinder
        if sphere is not None:
          self.sphere = sphere
        if torus is not None:
          self.torus = torus
        if plane is not None:
          self.plane = plane

    @property
    def type(self):
        """
        Gets the type of this Entity.
        Box/Cylinder/Sphere/Torus/Plane

        :return: The type of this Entity.
        :rtype: str
        """
        return self.container['type']

    @type.setter
    def type(self, type):
        """
        Sets the type of this Entity.
        Box/Cylinder/Sphere/Torus/Plane

        :param type: The type of this Entity.
        :type: str
        """

        self.container['type'] = type

    @property
    def box(self):
        """
        Gets the box of this Entity.
        Gets or sets Box entity

        :return: The box of this Entity.
        :rtype: Box
        """
        return self.container['box']

    @box.setter
    def box(self, box):
        """
        Sets the box of this Entity.
        Gets or sets Box entity

        :param box: The box of this Entity.
        :type: Box
        """

        self.container['box'] = box

    @property
    def cylinder(self):
        """
        Gets the cylinder of this Entity.
        Gets or sets Cylinder entity

        :return: The cylinder of this Entity.
        :rtype: Cylinder
        """
        return self.container['cylinder']

    @cylinder.setter
    def cylinder(self, cylinder):
        """
        Sets the cylinder of this Entity.
        Gets or sets Cylinder entity

        :param cylinder: The cylinder of this Entity.
        :type: Cylinder
        """

        self.container['cylinder'] = cylinder

    @property
    def sphere(self):
        """
        Gets the sphere of this Entity.
        Gets or sets Sphere entity

        :return: The sphere of this Entity.
        :rtype: Sphere
        """
        return self.container['sphere']

    @sphere.setter
    def sphere(self, sphere):
        """
        Sets the sphere of this Entity.
        Gets or sets Sphere entity

        :param sphere: The sphere of this Entity.
        :type: Sphere
        """

        self.container['sphere'] = sphere

    @property
    def torus(self):
        """
        Gets the torus of this Entity.
        Gets or sets Torus entity

        :return: The torus of this Entity.
        :rtype: Torus
        """
        return self.container['torus']

    @torus.setter
    def torus(self, torus):
        """
        Sets the torus of this Entity.
        Gets or sets Torus entity

        :param torus: The torus of this Entity.
        :type: Torus
        """

        self.container['torus'] = torus

    @property
    def plane(self):
        """
        Gets the plane of this Entity.
        Gets or sets Plane entity

        :return: The plane of this Entity.
        :rtype: Plane
        """
        return self.container['plane']

    @plane.setter
    def plane(self, plane):
        """
        Sets the plane of this Entity.
        Gets or sets Plane entity

        :param plane: The plane of this Entity.
        :type: Plane
        """

        self.container['plane'] = plane

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Entity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
