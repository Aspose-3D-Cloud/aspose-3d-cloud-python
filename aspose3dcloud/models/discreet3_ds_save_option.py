# coding: utf-8

"""
    Aspose.ThreeD Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re
from . import SaveOptions

class Discreet3DSSaveOption(SaveOptions):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'export_light': 'bool',
        'export_camera': 'bool',
        'duplicated_name_separator': 'str',
        'duplicated_name_counter_base': 'int',
        'duplicated_name_counter_format': 'str',
        'master_scale': 'float',
        'gamma_corrected_color': 'bool',
        'flip_coordinate_system': 'bool',
        'high_precise_color': 'bool'
    }

    attribute_map = {
        'export_light': 'ExportLight',
        'export_camera': 'ExportCamera',
        'duplicated_name_separator': 'DuplicatedNameSeparator',
        'duplicated_name_counter_base': 'DuplicatedNameCounterBase',
        'duplicated_name_counter_format': 'DuplicatedNameCounterFormat',
        'master_scale': 'MasterScale',
        'gamma_corrected_color': 'GammaCorrectedColor',
        'flip_coordinate_system': 'FlipCoordinateSystem',
        'high_precise_color': 'HighPreciseColor'
    }
    
    @staticmethod
    def get_swagger_types():
        return dict(Discreet3DSSaveOption.swagger_types, **SaveOptions.get_swagger_types())
    
    @staticmethod
    def get_attribute_map():
        return dict(Discreet3DSSaveOption.attribute_map, **SaveOptions.get_attribute_map())
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, export_light=None, export_camera=None, duplicated_name_separator=None, duplicated_name_counter_base=None, duplicated_name_counter_format=None, master_scale=None, gamma_corrected_color=None, flip_coordinate_system=None, high_precise_color=None, **kw):
        super(Discreet3DSSaveOption, self).__init__(**kw)
		    
        """
        Discreet3DSSaveOption - a model defined in Swagger
        """

        self.container['export_light'] = None
        self.container['export_camera'] = None
        self.container['duplicated_name_separator'] = None
        self.container['duplicated_name_counter_base'] = None
        self.container['duplicated_name_counter_format'] = None
        self.container['master_scale'] = None
        self.container['gamma_corrected_color'] = None
        self.container['flip_coordinate_system'] = None
        self.container['high_precise_color'] = None

        if export_light is not None:
          self.export_light = export_light
        if export_camera is not None:
          self.export_camera = export_camera
        if duplicated_name_separator is not None:
          self.duplicated_name_separator = duplicated_name_separator
        if duplicated_name_counter_base is not None:
          self.duplicated_name_counter_base = duplicated_name_counter_base
        if duplicated_name_counter_format is not None:
          self.duplicated_name_counter_format = duplicated_name_counter_format
        if master_scale is not None:
          self.master_scale = master_scale
        if gamma_corrected_color is not None:
          self.gamma_corrected_color = gamma_corrected_color
        if flip_coordinate_system is not None:
          self.flip_coordinate_system = flip_coordinate_system
        if high_precise_color is not None:
          self.high_precise_color = high_precise_color

    @property
    def export_light(self):
        """
        Gets the export_light of this Discreet3DSSaveOption.
        Gets or sets whether export all lights in the scene.

        :return: The export_light of this Discreet3DSSaveOption.
        :rtype: bool
        """
        return self.container['export_light']

    @export_light.setter
    def export_light(self, export_light):
        """
        Sets the export_light of this Discreet3DSSaveOption.
        Gets or sets whether export all lights in the scene.

        :param export_light: The export_light of this Discreet3DSSaveOption.
        :type: bool
        """

        self.container['export_light'] = export_light

    @property
    def export_camera(self):
        """
        Gets the export_camera of this Discreet3DSSaveOption.
        Gets or sets whether export all cameras in the scene

        :return: The export_camera of this Discreet3DSSaveOption.
        :rtype: bool
        """
        return self.container['export_camera']

    @export_camera.setter
    def export_camera(self, export_camera):
        """
        Sets the export_camera of this Discreet3DSSaveOption.
        Gets or sets whether export all cameras in the scene

        :param export_camera: The export_camera of this Discreet3DSSaveOption.
        :type: bool
        """

        self.container['export_camera'] = export_camera

    @property
    def duplicated_name_separator(self):
        """
        Gets the duplicated_name_separator of this Discreet3DSSaveOption.
        The separator between object's name and the duplicated counter, default value is \"_\". When scene contains objects that use the same name, Aspose.3D 3DS exporter will generate a different name for the object. For example there's two nodes named \"Box\", the first node will have a name \"Box\", and the second node will get a new name \"Box_2\" using the default configuration

        :return: The duplicated_name_separator of this Discreet3DSSaveOption.
        :rtype: str
        """
        return self.container['duplicated_name_separator']

    @duplicated_name_separator.setter
    def duplicated_name_separator(self, duplicated_name_separator):
        """
        Sets the duplicated_name_separator of this Discreet3DSSaveOption.
        The separator between object's name and the duplicated counter, default value is \"_\". When scene contains objects that use the same name, Aspose.3D 3DS exporter will generate a different name for the object. For example there's two nodes named \"Box\", the first node will have a name \"Box\", and the second node will get a new name \"Box_2\" using the default configuration

        :param duplicated_name_separator: The duplicated_name_separator of this Discreet3DSSaveOption.
        :type: str
        """

        self.container['duplicated_name_separator'] = duplicated_name_separator

    @property
    def duplicated_name_counter_base(self):
        """
        Gets the duplicated_name_counter_base of this Discreet3DSSaveOption.
        The counter used by generating new name for duplicated names

        :return: The duplicated_name_counter_base of this Discreet3DSSaveOption.
        :rtype: int
        """
        return self.container['duplicated_name_counter_base']

    @duplicated_name_counter_base.setter
    def duplicated_name_counter_base(self, duplicated_name_counter_base):
        """
        Sets the duplicated_name_counter_base of this Discreet3DSSaveOption.
        The counter used by generating new name for duplicated names

        :param duplicated_name_counter_base: The duplicated_name_counter_base of this Discreet3DSSaveOption.
        :type: int
        """

        self.container['duplicated_name_counter_base'] = duplicated_name_counter_base

    @property
    def duplicated_name_counter_format(self):
        """
        Gets the duplicated_name_counter_format of this Discreet3DSSaveOption.
        The format of the duplicated counter, default value is empty string.

        :return: The duplicated_name_counter_format of this Discreet3DSSaveOption.
        :rtype: str
        """
        return self.container['duplicated_name_counter_format']

    @duplicated_name_counter_format.setter
    def duplicated_name_counter_format(self, duplicated_name_counter_format):
        """
        Sets the duplicated_name_counter_format of this Discreet3DSSaveOption.
        The format of the duplicated counter, default value is empty string.

        :param duplicated_name_counter_format: The duplicated_name_counter_format of this Discreet3DSSaveOption.
        :type: str
        """

        self.container['duplicated_name_counter_format'] = duplicated_name_counter_format

    @property
    def master_scale(self):
        """
        Gets the master_scale of this Discreet3DSSaveOption.
        Gets or sets the master scale used in exporting.

        :return: The master_scale of this Discreet3DSSaveOption.
        :rtype: float
        """
        return self.container['master_scale']

    @master_scale.setter
    def master_scale(self, master_scale):
        """
        Sets the master_scale of this Discreet3DSSaveOption.
        Gets or sets the master scale used in exporting.

        :param master_scale: The master_scale of this Discreet3DSSaveOption.
        :type: float
        """

        self.container['master_scale'] = master_scale

    @property
    def gamma_corrected_color(self):
        """
        Gets the gamma_corrected_color of this Discreet3DSSaveOption.
        Gets or sets the GammaCorrectedColor.

        :return: The gamma_corrected_color of this Discreet3DSSaveOption.
        :rtype: bool
        """
        return self.container['gamma_corrected_color']

    @gamma_corrected_color.setter
    def gamma_corrected_color(self, gamma_corrected_color):
        """
        Sets the gamma_corrected_color of this Discreet3DSSaveOption.
        Gets or sets the GammaCorrectedColor.

        :param gamma_corrected_color: The gamma_corrected_color of this Discreet3DSSaveOption.
        :type: bool
        """

        self.container['gamma_corrected_color'] = gamma_corrected_color

    @property
    def flip_coordinate_system(self):
        """
        Gets the flip_coordinate_system of this Discreet3DSSaveOption.
        Gets or sets flip coordinate system of control points/normal during importing/exporting..

        :return: The flip_coordinate_system of this Discreet3DSSaveOption.
        :rtype: bool
        """
        return self.container['flip_coordinate_system']

    @flip_coordinate_system.setter
    def flip_coordinate_system(self, flip_coordinate_system):
        """
        Sets the flip_coordinate_system of this Discreet3DSSaveOption.
        Gets or sets flip coordinate system of control points/normal during importing/exporting..

        :param flip_coordinate_system: The flip_coordinate_system of this Discreet3DSSaveOption.
        :type: bool
        """

        self.container['flip_coordinate_system'] = flip_coordinate_system

    @property
    def high_precise_color(self):
        """
        Gets the high_precise_color of this Discreet3DSSaveOption.
        Gets or sets the HighPreciseColor.

        :return: The high_precise_color of this Discreet3DSSaveOption.
        :rtype: bool
        """
        return self.container['high_precise_color']

    @high_precise_color.setter
    def high_precise_color(self, high_precise_color):
        """
        Sets the high_precise_color of this Discreet3DSSaveOption.
        Gets or sets the HighPreciseColor.

        :param high_precise_color: The high_precise_color of this Discreet3DSSaveOption.
        :type: bool
        """

        self.container['high_precise_color'] = high_precise_color

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Discreet3DSSaveOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
