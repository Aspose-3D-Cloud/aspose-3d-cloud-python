# coding: utf-8

"""
    Aspose.ThreeD Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Cylinder(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'radius_top': 'float',
        'radius_bottom': 'float',
        'height': 'float',
        'radial_segments': 'int',
        'height_segments': 'int',
        'open_ended': 'bool',
        'theta_start': 'float',
        'theta_length': 'float'
    }

    attribute_map = {
        'name': 'Name',
        'radius_top': 'RadiusTop',
        'radius_bottom': 'RadiusBottom',
        'height': 'Height',
        'radial_segments': 'RadialSegments',
        'height_segments': 'HeightSegments',
        'open_ended': 'OpenEnded',
        'theta_start': 'ThetaStart',
        'theta_length': 'ThetaLength'
    }
    
    @staticmethod
    def get_swagger_types():
        return Cylinder.swagger_types
    
    @staticmethod
    def get_attribute_map():
        return Cylinder.attribute_map
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, name=None, radius_top=None, radius_bottom=None, height=None, radial_segments=None, height_segments=None, open_ended=None, theta_start=None, theta_length=None, **kw):
        """
        Associative dict for storing property values
        """
        self.container = {}
		    
        """
        Cylinder - a model defined in Swagger
        """

        self.container['name'] = None
        self.container['radius_top'] = None
        self.container['radius_bottom'] = None
        self.container['height'] = None
        self.container['radial_segments'] = None
        self.container['height_segments'] = None
        self.container['open_ended'] = None
        self.container['theta_start'] = None
        self.container['theta_length'] = None

        if name is not None:
          self.name = name
        self.radius_top = radius_top
        self.radius_bottom = radius_bottom
        self.height = height
        self.radial_segments = radial_segments
        self.height_segments = height_segments
        self.open_ended = open_ended
        self.theta_start = theta_start
        self.theta_length = theta_length

    @property
    def name(self):
        """
        Gets the name of this Cylinder.
        Gets or sets the name of the cylinder             

        :return: The name of this Cylinder.
        :rtype: str
        """
        return self.container['name']

    @name.setter
    def name(self, name):
        """
        Sets the name of this Cylinder.
        Gets or sets the name of the cylinder             

        :param name: The name of this Cylinder.
        :type: str
        """

        self.container['name'] = name

    @property
    def radius_top(self):
        """
        Gets the radius_top of this Cylinder.
        Gets or sets the radius of cylinder's top cap.

        :return: The radius_top of this Cylinder.
        :rtype: float
        """
        return self.container['radius_top']

    @radius_top.setter
    def radius_top(self, radius_top):
        """
        Sets the radius_top of this Cylinder.
        Gets or sets the radius of cylinder's top cap.

        :param radius_top: The radius_top of this Cylinder.
        :type: float
        """
        """
        if radius_top is None:
            raise ValueError("Invalid value for `radius_top`, must not be `None`")
        """

        self.container['radius_top'] = radius_top

    @property
    def radius_bottom(self):
        """
        Gets the radius_bottom of this Cylinder.
        Gets or sets the radius bottoof cylinder's bottom cap.             

        :return: The radius_bottom of this Cylinder.
        :rtype: float
        """
        return self.container['radius_bottom']

    @radius_bottom.setter
    def radius_bottom(self, radius_bottom):
        """
        Sets the radius_bottom of this Cylinder.
        Gets or sets the radius bottoof cylinder's bottom cap.             

        :param radius_bottom: The radius_bottom of this Cylinder.
        :type: float
        """
        """
        if radius_bottom is None:
            raise ValueError("Invalid value for `radius_bottom`, must not be `None`")
        """

        self.container['radius_bottom'] = radius_bottom

    @property
    def height(self):
        """
        Gets the height of this Cylinder.
        Gets or sets the height of the cylinder.

        :return: The height of this Cylinder.
        :rtype: float
        """
        return self.container['height']

    @height.setter
    def height(self, height):
        """
        Sets the height of this Cylinder.
        Gets or sets the height of the cylinder.

        :param height: The height of this Cylinder.
        :type: float
        """
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")
        """

        self.container['height'] = height

    @property
    def radial_segments(self):
        """
        Gets the radial_segments of this Cylinder.
        Gets or sets the radial segments.

        :return: The radial_segments of this Cylinder.
        :rtype: int
        """
        return self.container['radial_segments']

    @radial_segments.setter
    def radial_segments(self, radial_segments):
        """
        Sets the radial_segments of this Cylinder.
        Gets or sets the radial segments.

        :param radial_segments: The radial_segments of this Cylinder.
        :type: int
        """
        """
        if radial_segments is None:
            raise ValueError("Invalid value for `radial_segments`, must not be `None`")
        """

        self.container['radial_segments'] = radial_segments

    @property
    def height_segments(self):
        """
        Gets the height_segments of this Cylinder.
        Gets or sets the height segments.

        :return: The height_segments of this Cylinder.
        :rtype: int
        """
        return self.container['height_segments']

    @height_segments.setter
    def height_segments(self, height_segments):
        """
        Sets the height_segments of this Cylinder.
        Gets or sets the height segments.

        :param height_segments: The height_segments of this Cylinder.
        :type: int
        """
        """
        if height_segments is None:
            raise ValueError("Invalid value for `height_segments`, must not be `None`")
        """

        self.container['height_segments'] = height_segments

    @property
    def open_ended(self):
        """
        Gets the open_ended of this Cylinder.
        Gets or sets a value indicating whether this Aspose.ThreeD.Entities.Cylinder open ended. The default value is false.

        :return: The open_ended of this Cylinder.
        :rtype: bool
        """
        return self.container['open_ended']

    @open_ended.setter
    def open_ended(self, open_ended):
        """
        Sets the open_ended of this Cylinder.
        Gets or sets a value indicating whether this Aspose.ThreeD.Entities.Cylinder open ended. The default value is false.

        :param open_ended: The open_ended of this Cylinder.
        :type: bool
        """
        """
        if open_ended is None:
            raise ValueError("Invalid value for `open_ended`, must not be `None`")
        """

        self.container['open_ended'] = open_ended

    @property
    def theta_start(self):
        """
        Gets the theta_start of this Cylinder.
        Gets or sets the theta start. The default value is 0.             

        :return: The theta_start of this Cylinder.
        :rtype: float
        """
        return self.container['theta_start']

    @theta_start.setter
    def theta_start(self, theta_start):
        """
        Sets the theta_start of this Cylinder.
        Gets or sets the theta start. The default value is 0.             

        :param theta_start: The theta_start of this Cylinder.
        :type: float
        """
        """
        if theta_start is None:
            raise ValueError("Invalid value for `theta_start`, must not be `None`")
        """

        self.container['theta_start'] = theta_start

    @property
    def theta_length(self):
        """
        Gets the theta_length of this Cylinder.
        Gets or sets the length of the theta. The default value is 2p.

        :return: The theta_length of this Cylinder.
        :rtype: float
        """
        return self.container['theta_length']

    @theta_length.setter
    def theta_length(self, theta_length):
        """
        Sets the theta_length of this Cylinder.
        Gets or sets the length of the theta. The default value is 2p.

        :param theta_length: The theta_length of this Cylinder.
        :type: float
        """
        """
        if theta_length is None:
            raise ValueError("Invalid value for `theta_length`, must not be `None`")
        """

        self.container['theta_length'] = theta_length

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Cylinder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
