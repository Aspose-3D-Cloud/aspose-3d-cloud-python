# coding: utf-8

"""
    Aspose.ThreeD Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re
from . import SaveOptions

class HTMLSaveOption(SaveOptions):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'show_grid': 'bool',
        'show_rulers': 'bool',
        'show_ui': 'bool',
        'orientation_box': 'bool',
        'up_vector': 'str',
        'far_plane': 'float',
        'near_plane': 'float',
        'look_at': 'Vector3',
        'camera_position': 'Vector3',
        'field_of_view': 'float'
    }

    attribute_map = {
        'show_grid': 'ShowGrid',
        'show_rulers': 'ShowRulers',
        'show_ui': 'ShowUI',
        'orientation_box': 'OrientationBox',
        'up_vector': 'UpVector',
        'far_plane': 'FarPlane',
        'near_plane': 'NearPlane',
        'look_at': 'LookAt',
        'camera_position': 'CameraPosition',
        'field_of_view': 'FieldOfView'
    }
    
    @staticmethod
    def get_swagger_types():
        return dict(HTMLSaveOption.swagger_types, **SaveOptions.get_swagger_types())
    
    @staticmethod
    def get_attribute_map():
        return dict(HTMLSaveOption.attribute_map, **SaveOptions.get_attribute_map())
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, show_grid=None, show_rulers=None, show_ui=None, orientation_box=None, up_vector=None, far_plane=None, near_plane=None, look_at=None, camera_position=None, field_of_view=None, **kw):
        super(HTMLSaveOption, self).__init__(**kw)
		    
        """
        HTMLSaveOption - a model defined in Swagger
        """

        self.container['show_grid'] = None
        self.container['show_rulers'] = None
        self.container['show_ui'] = None
        self.container['orientation_box'] = None
        self.container['up_vector'] = None
        self.container['far_plane'] = None
        self.container['near_plane'] = None
        self.container['look_at'] = None
        self.container['camera_position'] = None
        self.container['field_of_view'] = None

        if show_grid is not None:
          self.show_grid = show_grid
        if show_rulers is not None:
          self.show_rulers = show_rulers
        if show_ui is not None:
          self.show_ui = show_ui
        if orientation_box is not None:
          self.orientation_box = orientation_box
        if up_vector is not None:
          self.up_vector = up_vector
        if far_plane is not None:
          self.far_plane = far_plane
        if near_plane is not None:
          self.near_plane = near_plane
        if look_at is not None:
          self.look_at = look_at
        if camera_position is not None:
          self.camera_position = camera_position
        if field_of_view is not None:
          self.field_of_view = field_of_view

    @property
    def show_grid(self):
        """
        Gets the show_grid of this HTMLSaveOption.
         Display a grid in the scene. Default value is true.

        :return: The show_grid of this HTMLSaveOption.
        :rtype: bool
        """
        return self.container['show_grid']

    @show_grid.setter
    def show_grid(self, show_grid):
        """
        Sets the show_grid of this HTMLSaveOption.
         Display a grid in the scene. Default value is true.

        :param show_grid: The show_grid of this HTMLSaveOption.
        :type: bool
        """

        self.container['show_grid'] = show_grid

    @property
    def show_rulers(self):
        """
        Gets the show_rulers of this HTMLSaveOption.
         Display rulers of x/y/z axises in the scene to measure the model. Default value is false

        :return: The show_rulers of this HTMLSaveOption.
        :rtype: bool
        """
        return self.container['show_rulers']

    @show_rulers.setter
    def show_rulers(self, show_rulers):
        """
        Sets the show_rulers of this HTMLSaveOption.
         Display rulers of x/y/z axises in the scene to measure the model. Default value is false

        :param show_rulers: The show_rulers of this HTMLSaveOption.
        :type: bool
        """

        self.container['show_rulers'] = show_rulers

    @property
    def show_ui(self):
        """
        Gets the show_ui of this HTMLSaveOption.
        Display a simple UI in the scene. Default value is true

        :return: The show_ui of this HTMLSaveOption.
        :rtype: bool
        """
        return self.container['show_ui']

    @show_ui.setter
    def show_ui(self, show_ui):
        """
        Sets the show_ui of this HTMLSaveOption.
        Display a simple UI in the scene. Default value is true

        :param show_ui: The show_ui of this HTMLSaveOption.
        :type: bool
        """

        self.container['show_ui'] = show_ui

    @property
    def orientation_box(self):
        """
        Gets the orientation_box of this HTMLSaveOption.
        Display a orientation box. Default value is true.

        :return: The orientation_box of this HTMLSaveOption.
        :rtype: bool
        """
        return self.container['orientation_box']

    @orientation_box.setter
    def orientation_box(self, orientation_box):
        """
        Sets the orientation_box of this HTMLSaveOption.
        Display a orientation box. Default value is true.

        :param orientation_box: The orientation_box of this HTMLSaveOption.
        :type: bool
        """

        self.container['orientation_box'] = orientation_box

    @property
    def up_vector(self):
        """
        Gets the up_vector of this HTMLSaveOption.
        Gets or sets the up vector, value can be \"x\"/\"y\"/\"z\", default value is \"y\".

        :return: The up_vector of this HTMLSaveOption.
        :rtype: str
        """
        return self.container['up_vector']

    @up_vector.setter
    def up_vector(self, up_vector):
        """
        Sets the up_vector of this HTMLSaveOption.
        Gets or sets the up vector, value can be \"x\"/\"y\"/\"z\", default value is \"y\".

        :param up_vector: The up_vector of this HTMLSaveOption.
        :type: str
        """

        self.container['up_vector'] = up_vector

    @property
    def far_plane(self):
        """
        Gets the far_plane of this HTMLSaveOption.
        Gets or sets the far plane of the camera, default value is 1000

        :return: The far_plane of this HTMLSaveOption.
        :rtype: float
        """
        return self.container['far_plane']

    @far_plane.setter
    def far_plane(self, far_plane):
        """
        Sets the far_plane of this HTMLSaveOption.
        Gets or sets the far plane of the camera, default value is 1000

        :param far_plane: The far_plane of this HTMLSaveOption.
        :type: float
        """

        self.container['far_plane'] = far_plane

    @property
    def near_plane(self):
        """
        Gets the near_plane of this HTMLSaveOption.
        Gets or sets the near plane of the camera, default value is 1

        :return: The near_plane of this HTMLSaveOption.
        :rtype: float
        """
        return self.container['near_plane']

    @near_plane.setter
    def near_plane(self, near_plane):
        """
        Sets the near_plane of this HTMLSaveOption.
        Gets or sets the near plane of the camera, default value is 1

        :param near_plane: The near_plane of this HTMLSaveOption.
        :type: float
        """

        self.container['near_plane'] = near_plane

    @property
    def look_at(self):
        """
        Gets the look_at of this HTMLSaveOption.
        Gets or sets the default look at position, default value is (0, 0, 0)

        :return: The look_at of this HTMLSaveOption.
        :rtype: Vector3
        """
        return self.container['look_at']

    @look_at.setter
    def look_at(self, look_at):
        """
        Sets the look_at of this HTMLSaveOption.
        Gets or sets the default look at position, default value is (0, 0, 0)

        :param look_at: The look_at of this HTMLSaveOption.
        :type: Vector3
        """

        self.container['look_at'] = look_at

    @property
    def camera_position(self):
        """
        Gets the camera_position of this HTMLSaveOption.
        Gets or sets the initial position of the camera, default value is (10, 10, 10)

        :return: The camera_position of this HTMLSaveOption.
        :rtype: Vector3
        """
        return self.container['camera_position']

    @camera_position.setter
    def camera_position(self, camera_position):
        """
        Sets the camera_position of this HTMLSaveOption.
        Gets or sets the initial position of the camera, default value is (10, 10, 10)

        :param camera_position: The camera_position of this HTMLSaveOption.
        :type: Vector3
        """

        self.container['camera_position'] = camera_position

    @property
    def field_of_view(self):
        """
        Gets the field_of_view of this HTMLSaveOption.
         Gets or sets the field of the view, default value is 45, measured in degree

        :return: The field_of_view of this HTMLSaveOption.
        :rtype: float
        """
        return self.container['field_of_view']

    @field_of_view.setter
    def field_of_view(self, field_of_view):
        """
        Sets the field_of_view of this HTMLSaveOption.
         Gets or sets the field of the view, default value is 45, measured in degree

        :param field_of_view: The field_of_view of this HTMLSaveOption.
        :type: float
        """

        self.container['field_of_view'] = field_of_view

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HTMLSaveOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
