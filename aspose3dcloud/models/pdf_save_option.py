# coding: utf-8

"""
    Aspose.ThreeD Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re
from . import SaveOptions

class PdfSaveOption(SaveOptions):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flip_coordinate_system': 'bool',
        'render_mode': 'PdfRenderMode',
        'lighting_scheme': 'PdfLightingScheme'
    }

    attribute_map = {
        'flip_coordinate_system': 'FlipCoordinateSystem',
        'render_mode': 'RenderMode',
        'lighting_scheme': 'LightingScheme'
    }
    
    @staticmethod
    def get_swagger_types():
        return dict(PdfSaveOption.swagger_types, **SaveOptions.get_swagger_types())
    
    @staticmethod
    def get_attribute_map():
        return dict(PdfSaveOption.attribute_map, **SaveOptions.get_attribute_map())
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, flip_coordinate_system=None, render_mode=None, lighting_scheme=None, **kw):
        super(PdfSaveOption, self).__init__(**kw)
		    
        """
        PdfSaveOption - a model defined in Swagger
        """

        self.container['flip_coordinate_system'] = None
        self.container['render_mode'] = None
        self.container['lighting_scheme'] = None

        if flip_coordinate_system is not None:
          self.flip_coordinate_system = flip_coordinate_system
        if render_mode is not None:
          self.render_mode = render_mode
        if lighting_scheme is not None:
          self.lighting_scheme = lighting_scheme

    @property
    def flip_coordinate_system(self):
        """
        Gets the flip_coordinate_system of this PdfSaveOption.
        Gets or sets to flip the coordinate system of the scene during exporting.

        :return: The flip_coordinate_system of this PdfSaveOption.
        :rtype: bool
        """
        return self.container['flip_coordinate_system']

    @flip_coordinate_system.setter
    def flip_coordinate_system(self, flip_coordinate_system):
        """
        Sets the flip_coordinate_system of this PdfSaveOption.
        Gets or sets to flip the coordinate system of the scene during exporting.

        :param flip_coordinate_system: The flip_coordinate_system of this PdfSaveOption.
        :type: bool
        """

        self.container['flip_coordinate_system'] = flip_coordinate_system

    @property
    def render_mode(self):
        """
        Gets the render_mode of this PdfSaveOption.
        Render mode specifies the style in which the 3D artwork is rendered.

        :return: The render_mode of this PdfSaveOption.
        :rtype: PdfRenderMode
        """
        return self.container['render_mode']

    @render_mode.setter
    def render_mode(self, render_mode):
        """
        Sets the render_mode of this PdfSaveOption.
        Render mode specifies the style in which the 3D artwork is rendered.

        :param render_mode: The render_mode of this PdfSaveOption.
        :type: PdfRenderMode
        """

        self.container['render_mode'] = render_mode

    @property
    def lighting_scheme(self):
        """
        Gets the lighting_scheme of this PdfSaveOption.
        LightingScheme specifies the lighting to apply to 3D artwork.

        :return: The lighting_scheme of this PdfSaveOption.
        :rtype: PdfLightingScheme
        """
        return self.container['lighting_scheme']

    @lighting_scheme.setter
    def lighting_scheme(self, lighting_scheme):
        """
        Sets the lighting_scheme of this PdfSaveOption.
        LightingScheme specifies the lighting to apply to 3D artwork.

        :param lighting_scheme: The lighting_scheme of this PdfSaveOption.
        :type: PdfLightingScheme
        """

        self.container['lighting_scheme'] = lighting_scheme

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PdfSaveOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
