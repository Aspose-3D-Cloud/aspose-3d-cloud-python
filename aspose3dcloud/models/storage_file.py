# coding: utf-8

"""
    Aspose.ThreeD Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StorageFile(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'is_folder': 'bool',
        'modified_date': 'datetime',
        'size': 'int',
        'path': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'is_folder': 'IsFolder',
        'modified_date': 'ModifiedDate',
        'size': 'Size',
        'path': 'Path'
    }
    
    @staticmethod
    def get_swagger_types():
        return StorageFile.swagger_types
    
    @staticmethod
    def get_attribute_map():
        return StorageFile.attribute_map
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, name=None, is_folder=None, modified_date=None, size=None, path=None, **kw):
        """
        Associative dict for storing property values
        """
        self.container = {}
		    
        """
        StorageFile - a model defined in Swagger
        """

        self.container['name'] = None
        self.container['is_folder'] = None
        self.container['modified_date'] = None
        self.container['size'] = None
        self.container['path'] = None

        if name is not None:
          self.name = name
        self.is_folder = is_folder
        if modified_date is not None:
          self.modified_date = modified_date
        self.size = size
        if path is not None:
          self.path = path

    @property
    def name(self):
        """
        Gets the name of this StorageFile.
        File or folder name.

        :return: The name of this StorageFile.
        :rtype: str
        """
        return self.container['name']

    @name.setter
    def name(self, name):
        """
        Sets the name of this StorageFile.
        File or folder name.

        :param name: The name of this StorageFile.
        :type: str
        """

        self.container['name'] = name

    @property
    def is_folder(self):
        """
        Gets the is_folder of this StorageFile.
        True if it is a folder.

        :return: The is_folder of this StorageFile.
        :rtype: bool
        """
        return self.container['is_folder']

    @is_folder.setter
    def is_folder(self, is_folder):
        """
        Sets the is_folder of this StorageFile.
        True if it is a folder.

        :param is_folder: The is_folder of this StorageFile.
        :type: bool
        """
        """
        if is_folder is None:
            raise ValueError("Invalid value for `is_folder`, must not be `None`")
        """

        self.container['is_folder'] = is_folder

    @property
    def modified_date(self):
        """
        Gets the modified_date of this StorageFile.
        File or folder last modified DateTime.

        :return: The modified_date of this StorageFile.
        :rtype: datetime
        """
        return self.container['modified_date']

    @modified_date.setter
    def modified_date(self, modified_date):
        """
        Sets the modified_date of this StorageFile.
        File or folder last modified DateTime.

        :param modified_date: The modified_date of this StorageFile.
        :type: datetime
        """

        self.container['modified_date'] = modified_date

    @property
    def size(self):
        """
        Gets the size of this StorageFile.
        File or folder size.

        :return: The size of this StorageFile.
        :rtype: int
        """
        return self.container['size']

    @size.setter
    def size(self, size):
        """
        Sets the size of this StorageFile.
        File or folder size.

        :param size: The size of this StorageFile.
        :type: int
        """
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")
        """

        self.container['size'] = size

    @property
    def path(self):
        """
        Gets the path of this StorageFile.
        File or folder path.

        :return: The path of this StorageFile.
        :rtype: str
        """
        return self.container['path']

    @path.setter
    def path(self, path):
        """
        Sets the path of this StorageFile.
        File or folder path.

        :param path: The path of this StorageFile.
        :type: str
        """

        self.container['path'] = path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StorageFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
