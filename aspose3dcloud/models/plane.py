# coding: utf-8

"""
    Aspose.ThreeD Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Plane(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'length': 'float',
        'width': 'float',
        'length_segments': 'int',
        'width_segments': 'int'
    }

    attribute_map = {
        'name': 'Name',
        'length': 'Length',
        'width': 'Width',
        'length_segments': 'LengthSegments',
        'width_segments': 'WidthSegments'
    }
    
    @staticmethod
    def get_swagger_types():
        return Plane.swagger_types
    
    @staticmethod
    def get_attribute_map():
        return Plane.attribute_map
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, name=None, length=None, width=None, length_segments=None, width_segments=None, **kw):
        """
        Associative dict for storing property values
        """
        self.container = {}
		    
        """
        Plane - a model defined in Swagger
        """

        self.container['name'] = None
        self.container['length'] = None
        self.container['width'] = None
        self.container['length_segments'] = None
        self.container['width_segments'] = None

        if name is not None:
          self.name = name
        self.length = length
        self.width = width
        self.length_segments = length_segments
        self.width_segments = width_segments

    @property
    def name(self):
        """
        Gets the name of this Plane.
        The name of Plane

        :return: The name of this Plane.
        :rtype: str
        """
        return self.container['name']

    @name.setter
    def name(self, name):
        """
        Sets the name of this Plane.
        The name of Plane

        :param name: The name of this Plane.
        :type: str
        """

        self.container['name'] = name

    @property
    def length(self):
        """
        Gets the length of this Plane.
        Gets or sets the length of the plane.             

        :return: The length of this Plane.
        :rtype: float
        """
        return self.container['length']

    @length.setter
    def length(self, length):
        """
        Sets the length of this Plane.
        Gets or sets the length of the plane.             

        :param length: The length of this Plane.
        :type: float
        """
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")
        """

        self.container['length'] = length

    @property
    def width(self):
        """
        Gets the width of this Plane.
        Gets or sets the width of the plane             

        :return: The width of this Plane.
        :rtype: float
        """
        return self.container['width']

    @width.setter
    def width(self, width):
        """
        Sets the width of this Plane.
        Gets or sets the width of the plane             

        :param width: The width of this Plane.
        :type: float
        """
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")
        """

        self.container['width'] = width

    @property
    def length_segments(self):
        """
        Gets the length_segments of this Plane.
        Gets or sets the length segments.             

        :return: The length_segments of this Plane.
        :rtype: int
        """
        return self.container['length_segments']

    @length_segments.setter
    def length_segments(self, length_segments):
        """
        Sets the length_segments of this Plane.
        Gets or sets the length segments.             

        :param length_segments: The length_segments of this Plane.
        :type: int
        """
        """
        if length_segments is None:
            raise ValueError("Invalid value for `length_segments`, must not be `None`")
        """

        self.container['length_segments'] = length_segments

    @property
    def width_segments(self):
        """
        Gets the width_segments of this Plane.
        Gets or sets the width segments.

        :return: The width_segments of this Plane.
        :rtype: int
        """
        return self.container['width_segments']

    @width_segments.setter
    def width_segments(self, width_segments):
        """
        Sets the width_segments of this Plane.
        Gets or sets the width segments.

        :param width_segments: The width_segments of this Plane.
        :type: int
        """
        """
        if width_segments is None:
            raise ValueError("Invalid value for `width_segments`, must not be `None`")
        """

        self.container['width_segments'] = width_segments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Plane):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
