# coding: utf-8

"""
    Aspose.ThreeD Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FilesUploadResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uploaded': 'list[str]',
        'errors': 'list[Error]'
    }

    attribute_map = {
        'uploaded': 'Uploaded',
        'errors': 'Errors'
    }
    
    @staticmethod
    def get_swagger_types():
        return FilesUploadResult.swagger_types
    
    @staticmethod
    def get_attribute_map():
        return FilesUploadResult.attribute_map
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, uploaded=None, errors=None, **kw):
        """
        Associative dict for storing property values
        """
        self.container = {}
		    
        """
        FilesUploadResult - a model defined in Swagger
        """

        self.container['uploaded'] = None
        self.container['errors'] = None

        if uploaded is not None:
          self.uploaded = uploaded
        if errors is not None:
          self.errors = errors

    @property
    def uploaded(self):
        """
        Gets the uploaded of this FilesUploadResult.
        List of uploaded file names

        :return: The uploaded of this FilesUploadResult.
        :rtype: list[str]
        """
        return self.container['uploaded']

    @uploaded.setter
    def uploaded(self, uploaded):
        """
        Sets the uploaded of this FilesUploadResult.
        List of uploaded file names

        :param uploaded: The uploaded of this FilesUploadResult.
        :type: list[str]
        """

        self.container['uploaded'] = uploaded

    @property
    def errors(self):
        """
        Gets the errors of this FilesUploadResult.
        List of errors.

        :return: The errors of this FilesUploadResult.
        :rtype: list[Error]
        """
        return self.container['errors']

    @errors.setter
    def errors(self, errors):
        """
        Sets the errors of this FilesUploadResult.
        List of errors.

        :param errors: The errors of this FilesUploadResult.
        :type: list[Error]
        """

        self.container['errors'] = errors

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FilesUploadResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
