# coding: utf-8

"""
    Aspose.ThreeD Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re
from . import SaveOptions

class FBXSaveOption(SaveOptions):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable_compression': 'bool',
        'fold_repeated_curve_data': 'bool',
        'export_legacy_material_properties': 'bool',
        'video_for_texture': 'bool',
        'generate_vertex_element_material': 'bool'
    }

    attribute_map = {
        'enable_compression': 'EnableCompression',
        'fold_repeated_curve_data': 'FoldRepeatedCurveData',
        'export_legacy_material_properties': 'ExportLegacyMaterialProperties',
        'video_for_texture': 'VideoForTexture',
        'generate_vertex_element_material': 'GenerateVertexElementMaterial'
    }
    
    @staticmethod
    def get_swagger_types():
        return dict(FBXSaveOption.swagger_types, **SaveOptions.get_swagger_types())
    
    @staticmethod
    def get_attribute_map():
        return dict(FBXSaveOption.attribute_map, **SaveOptions.get_attribute_map())
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, enable_compression=None, fold_repeated_curve_data=None, export_legacy_material_properties=None, video_for_texture=None, generate_vertex_element_material=None, **kw):
        super(FBXSaveOption, self).__init__(**kw)
		    
        """
        FBXSaveOption - a model defined in Swagger
        """

        self.container['enable_compression'] = None
        self.container['fold_repeated_curve_data'] = None
        self.container['export_legacy_material_properties'] = None
        self.container['video_for_texture'] = None
        self.container['generate_vertex_element_material'] = None

        if enable_compression is not None:
          self.enable_compression = enable_compression
        if fold_repeated_curve_data is not None:
          self.fold_repeated_curve_data = fold_repeated_curve_data
        if export_legacy_material_properties is not None:
          self.export_legacy_material_properties = export_legacy_material_properties
        if video_for_texture is not None:
          self.video_for_texture = video_for_texture
        if generate_vertex_element_material is not None:
          self.generate_vertex_element_material = generate_vertex_element_material

    @property
    def enable_compression(self):
        """
        Gets the enable_compression of this FBXSaveOption.
         Compression large binary data in the FBX file, default value is true

        :return: The enable_compression of this FBXSaveOption.
        :rtype: bool
        """
        return self.container['enable_compression']

    @enable_compression.setter
    def enable_compression(self, enable_compression):
        """
        Sets the enable_compression of this FBXSaveOption.
         Compression large binary data in the FBX file, default value is true

        :param enable_compression: The enable_compression of this FBXSaveOption.
        :type: bool
        """

        self.container['enable_compression'] = enable_compression

    @property
    def fold_repeated_curve_data(self):
        """
        Gets the fold_repeated_curve_data of this FBXSaveOption.
        Gets or sets whether reuse repeated curve data by increasing last data's ref count

        :return: The fold_repeated_curve_data of this FBXSaveOption.
        :rtype: bool
        """
        return self.container['fold_repeated_curve_data']

    @fold_repeated_curve_data.setter
    def fold_repeated_curve_data(self, fold_repeated_curve_data):
        """
        Sets the fold_repeated_curve_data of this FBXSaveOption.
        Gets or sets whether reuse repeated curve data by increasing last data's ref count

        :param fold_repeated_curve_data: The fold_repeated_curve_data of this FBXSaveOption.
        :type: bool
        """

        self.container['fold_repeated_curve_data'] = fold_repeated_curve_data

    @property
    def export_legacy_material_properties(self):
        """
        Gets the export_legacy_material_properties of this FBXSaveOption.
        Gets or sets whether export legacy material properties, used for back compatibility. This option is turned on by default

        :return: The export_legacy_material_properties of this FBXSaveOption.
        :rtype: bool
        """
        return self.container['export_legacy_material_properties']

    @export_legacy_material_properties.setter
    def export_legacy_material_properties(self, export_legacy_material_properties):
        """
        Sets the export_legacy_material_properties of this FBXSaveOption.
        Gets or sets whether export legacy material properties, used for back compatibility. This option is turned on by default

        :param export_legacy_material_properties: The export_legacy_material_properties of this FBXSaveOption.
        :type: bool
        """

        self.container['export_legacy_material_properties'] = export_legacy_material_properties

    @property
    def video_for_texture(self):
        """
        Gets the video_for_texture of this FBXSaveOption.
        Gets or sets whether generate a Video instance for Aspose.ThreeD.Shading.Texture when exporting as FBX.

        :return: The video_for_texture of this FBXSaveOption.
        :rtype: bool
        """
        return self.container['video_for_texture']

    @video_for_texture.setter
    def video_for_texture(self, video_for_texture):
        """
        Sets the video_for_texture of this FBXSaveOption.
        Gets or sets whether generate a Video instance for Aspose.ThreeD.Shading.Texture when exporting as FBX.

        :param video_for_texture: The video_for_texture of this FBXSaveOption.
        :type: bool
        """

        self.container['video_for_texture'] = video_for_texture

    @property
    def generate_vertex_element_material(self):
        """
        Gets the generate_vertex_element_material of this FBXSaveOption.
        Gets or sets whether always generate a Aspose.ThreeD.Entities.VertexElementMaterial for geometries if the attached node contains materials. This is turned off by default.

        :return: The generate_vertex_element_material of this FBXSaveOption.
        :rtype: bool
        """
        return self.container['generate_vertex_element_material']

    @generate_vertex_element_material.setter
    def generate_vertex_element_material(self, generate_vertex_element_material):
        """
        Sets the generate_vertex_element_material of this FBXSaveOption.
        Gets or sets whether always generate a Aspose.ThreeD.Entities.VertexElementMaterial for geometries if the attached node contains materials. This is turned off by default.

        :param generate_vertex_element_material: The generate_vertex_element_material of this FBXSaveOption.
        :type: bool
        """

        self.container['generate_vertex_element_material'] = generate_vertex_element_material

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FBXSaveOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
