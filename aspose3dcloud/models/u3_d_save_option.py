# coding: utf-8

"""
    Aspose.ThreeD Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re
from . import SaveOptions

class U3DSaveOption(SaveOptions):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flip_coordinate_system': 'bool',
        'mesh_compression': 'bool',
        'export_normals': 'bool',
        'export_texture_coordinates': 'bool',
        'export_vertex_diffuse': 'bool',
        'export_vertex_specular': 'bool'
    }

    attribute_map = {
        'flip_coordinate_system': 'FlipCoordinateSystem',
        'mesh_compression': 'MeshCompression',
        'export_normals': 'ExportNormals',
        'export_texture_coordinates': 'ExportTextureCoordinates',
        'export_vertex_diffuse': 'ExportVertexDiffuse',
        'export_vertex_specular': 'ExportVertexSpecular'
    }
    
    @staticmethod
    def get_swagger_types():
        return dict(U3DSaveOption.swagger_types, **SaveOptions.get_swagger_types())
    
    @staticmethod
    def get_attribute_map():
        return dict(U3DSaveOption.attribute_map, **SaveOptions.get_attribute_map())
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, flip_coordinate_system=None, mesh_compression=None, export_normals=None, export_texture_coordinates=None, export_vertex_diffuse=None, export_vertex_specular=None, **kw):
        super(U3DSaveOption, self).__init__(**kw)
		    
        """
        U3DSaveOption - a model defined in Swagger
        """

        self.container['flip_coordinate_system'] = None
        self.container['mesh_compression'] = None
        self.container['export_normals'] = None
        self.container['export_texture_coordinates'] = None
        self.container['export_vertex_diffuse'] = None
        self.container['export_vertex_specular'] = None

        if flip_coordinate_system is not None:
          self.flip_coordinate_system = flip_coordinate_system
        if mesh_compression is not None:
          self.mesh_compression = mesh_compression
        if export_normals is not None:
          self.export_normals = export_normals
        if export_texture_coordinates is not None:
          self.export_texture_coordinates = export_texture_coordinates
        if export_vertex_diffuse is not None:
          self.export_vertex_diffuse = export_vertex_diffuse
        if export_vertex_specular is not None:
          self.export_vertex_specular = export_vertex_specular

    @property
    def flip_coordinate_system(self):
        """
        Gets the flip_coordinate_system of this U3DSaveOption.
        Gets or sets whether flip coordinate system of control points/normal during importing/exporting.

        :return: The flip_coordinate_system of this U3DSaveOption.
        :rtype: bool
        """
        return self.container['flip_coordinate_system']

    @flip_coordinate_system.setter
    def flip_coordinate_system(self, flip_coordinate_system):
        """
        Sets the flip_coordinate_system of this U3DSaveOption.
        Gets or sets whether flip coordinate system of control points/normal during importing/exporting.

        :param flip_coordinate_system: The flip_coordinate_system of this U3DSaveOption.
        :type: bool
        """

        self.container['flip_coordinate_system'] = flip_coordinate_system

    @property
    def mesh_compression(self):
        """
        Gets the mesh_compression of this U3DSaveOption.
        Gets or sets whether to enable mesh data compression.

        :return: The mesh_compression of this U3DSaveOption.
        :rtype: bool
        """
        return self.container['mesh_compression']

    @mesh_compression.setter
    def mesh_compression(self, mesh_compression):
        """
        Sets the mesh_compression of this U3DSaveOption.
        Gets or sets whether to enable mesh data compression.

        :param mesh_compression: The mesh_compression of this U3DSaveOption.
        :type: bool
        """

        self.container['mesh_compression'] = mesh_compression

    @property
    def export_normals(self):
        """
        Gets the export_normals of this U3DSaveOption.
        Gets or sets whether to export normal data.

        :return: The export_normals of this U3DSaveOption.
        :rtype: bool
        """
        return self.container['export_normals']

    @export_normals.setter
    def export_normals(self, export_normals):
        """
        Sets the export_normals of this U3DSaveOption.
        Gets or sets whether to export normal data.

        :param export_normals: The export_normals of this U3DSaveOption.
        :type: bool
        """

        self.container['export_normals'] = export_normals

    @property
    def export_texture_coordinates(self):
        """
        Gets the export_texture_coordinates of this U3DSaveOption.
        Gets or sets whether to export texture coordinates.

        :return: The export_texture_coordinates of this U3DSaveOption.
        :rtype: bool
        """
        return self.container['export_texture_coordinates']

    @export_texture_coordinates.setter
    def export_texture_coordinates(self, export_texture_coordinates):
        """
        Sets the export_texture_coordinates of this U3DSaveOption.
        Gets or sets whether to export texture coordinates.

        :param export_texture_coordinates: The export_texture_coordinates of this U3DSaveOption.
        :type: bool
        """

        self.container['export_texture_coordinates'] = export_texture_coordinates

    @property
    def export_vertex_diffuse(self):
        """
        Gets the export_vertex_diffuse of this U3DSaveOption.
        Gets or sets whether to export vertex's diffuse color.

        :return: The export_vertex_diffuse of this U3DSaveOption.
        :rtype: bool
        """
        return self.container['export_vertex_diffuse']

    @export_vertex_diffuse.setter
    def export_vertex_diffuse(self, export_vertex_diffuse):
        """
        Sets the export_vertex_diffuse of this U3DSaveOption.
        Gets or sets whether to export vertex's diffuse color.

        :param export_vertex_diffuse: The export_vertex_diffuse of this U3DSaveOption.
        :type: bool
        """

        self.container['export_vertex_diffuse'] = export_vertex_diffuse

    @property
    def export_vertex_specular(self):
        """
        Gets the export_vertex_specular of this U3DSaveOption.
        Gets or sets whether to export vertex' specular color.

        :return: The export_vertex_specular of this U3DSaveOption.
        :rtype: bool
        """
        return self.container['export_vertex_specular']

    @export_vertex_specular.setter
    def export_vertex_specular(self, export_vertex_specular):
        """
        Sets the export_vertex_specular of this U3DSaveOption.
        Gets or sets whether to export vertex' specular color.

        :param export_vertex_specular: The export_vertex_specular of this U3DSaveOption.
        :type: bool
        """

        self.container['export_vertex_specular'] = export_vertex_specular

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, U3DSaveOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
