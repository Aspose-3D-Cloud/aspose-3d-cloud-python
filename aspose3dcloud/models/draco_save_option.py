# coding: utf-8

"""
    Aspose.ThreeD Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re
from . import SaveOptions

class DracoSaveOption(SaveOptions):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'position_bits': 'int',
        'texture_coordinate_bits': 'int',
        'color_bits': 'int',
        'normal_bits': 'int',
        'compression_level': 'DracoCompressionLevel'
    }

    attribute_map = {
        'position_bits': 'PositionBits',
        'texture_coordinate_bits': 'TextureCoordinateBits',
        'color_bits': 'ColorBits',
        'normal_bits': 'NormalBits',
        'compression_level': 'CompressionLevel'
    }
    
    @staticmethod
    def get_swagger_types():
        return dict(DracoSaveOption.swagger_types, **SaveOptions.get_swagger_types())
    
    @staticmethod
    def get_attribute_map():
        return dict(DracoSaveOption.attribute_map, **SaveOptions.get_attribute_map())
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, position_bits=None, texture_coordinate_bits=None, color_bits=None, normal_bits=None, compression_level=None, **kw):
        super(DracoSaveOption, self).__init__(**kw)
		    
        """
        DracoSaveOption - a model defined in Swagger
        """

        self.container['position_bits'] = None
        self.container['texture_coordinate_bits'] = None
        self.container['color_bits'] = None
        self.container['normal_bits'] = None
        self.container['compression_level'] = None

        if position_bits is not None:
          self.position_bits = position_bits
        if texture_coordinate_bits is not None:
          self.texture_coordinate_bits = texture_coordinate_bits
        if color_bits is not None:
          self.color_bits = color_bits
        if normal_bits is not None:
          self.normal_bits = normal_bits
        if compression_level is not None:
          self.compression_level = compression_level

    @property
    def position_bits(self):
        """
        Gets the position_bits of this DracoSaveOption.
        Quantization bits for position, default value is 14

        :return: The position_bits of this DracoSaveOption.
        :rtype: int
        """
        return self.container['position_bits']

    @position_bits.setter
    def position_bits(self, position_bits):
        """
        Sets the position_bits of this DracoSaveOption.
        Quantization bits for position, default value is 14

        :param position_bits: The position_bits of this DracoSaveOption.
        :type: int
        """

        self.container['position_bits'] = position_bits

    @property
    def texture_coordinate_bits(self):
        """
        Gets the texture_coordinate_bits of this DracoSaveOption.
        Quantization bits for texture coordinate, default value is 12

        :return: The texture_coordinate_bits of this DracoSaveOption.
        :rtype: int
        """
        return self.container['texture_coordinate_bits']

    @texture_coordinate_bits.setter
    def texture_coordinate_bits(self, texture_coordinate_bits):
        """
        Sets the texture_coordinate_bits of this DracoSaveOption.
        Quantization bits for texture coordinate, default value is 12

        :param texture_coordinate_bits: The texture_coordinate_bits of this DracoSaveOption.
        :type: int
        """

        self.container['texture_coordinate_bits'] = texture_coordinate_bits

    @property
    def color_bits(self):
        """
        Gets the color_bits of this DracoSaveOption.
        Quantization bits for vertex color, default value is 10

        :return: The color_bits of this DracoSaveOption.
        :rtype: int
        """
        return self.container['color_bits']

    @color_bits.setter
    def color_bits(self, color_bits):
        """
        Sets the color_bits of this DracoSaveOption.
        Quantization bits for vertex color, default value is 10

        :param color_bits: The color_bits of this DracoSaveOption.
        :type: int
        """

        self.container['color_bits'] = color_bits

    @property
    def normal_bits(self):
        """
        Gets the normal_bits of this DracoSaveOption.
        Quantization bits for normal vectors, default value is 10

        :return: The normal_bits of this DracoSaveOption.
        :rtype: int
        """
        return self.container['normal_bits']

    @normal_bits.setter
    def normal_bits(self, normal_bits):
        """
        Sets the normal_bits of this DracoSaveOption.
        Quantization bits for normal vectors, default value is 10

        :param normal_bits: The normal_bits of this DracoSaveOption.
        :type: int
        """

        self.container['normal_bits'] = normal_bits

    @property
    def compression_level(self):
        """
        Gets the compression_level of this DracoSaveOption.
        Compression level, default value is Aspose.ThreeD.Formats.DracoCompressionLevel.Standard.

        :return: The compression_level of this DracoSaveOption.
        :rtype: DracoCompressionLevel
        """
        return self.container['compression_level']

    @compression_level.setter
    def compression_level(self, compression_level):
        """
        Sets the compression_level of this DracoSaveOption.
        Compression level, default value is Aspose.ThreeD.Formats.DracoCompressionLevel.Standard.

        :param compression_level: The compression_level of this DracoSaveOption.
        :type: DracoCompressionLevel
        """

        self.container['compression_level'] = compression_level

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DracoSaveOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
