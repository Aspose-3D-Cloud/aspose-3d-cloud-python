# coding: utf-8

"""
    Aspose.ThreeD Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re
from . import SaveOptions

class RvmSaveOption(SaveOptions):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_note': 'str',
        'author': 'str',
        'creation_time': 'str',
        'file_content_type': 'FileContentType'
    }

    attribute_map = {
        'file_note': 'FileNote',
        'author': 'Author',
        'creation_time': 'CreationTime',
        'file_content_type': 'FileContentType'
    }
    
    @staticmethod
    def get_swagger_types():
        return dict(RvmSaveOption.swagger_types, **SaveOptions.get_swagger_types())
    
    @staticmethod
    def get_attribute_map():
        return dict(RvmSaveOption.attribute_map, **SaveOptions.get_attribute_map())
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, file_note=None, author=None, creation_time=None, file_content_type=None, **kw):
        super(RvmSaveOption, self).__init__(**kw)
		    
        """
        RvmSaveOption - a model defined in Swagger
        """

        self.container['file_note'] = None
        self.container['author'] = None
        self.container['creation_time'] = None
        self.container['file_content_type'] = None

        if file_note is not None:
          self.file_note = file_note
        if author is not None:
          self.author = author
        if creation_time is not None:
          self.creation_time = creation_time
        if file_content_type is not None:
          self.file_content_type = file_content_type

    @property
    def file_note(self):
        """
        Gets the file_note of this RvmSaveOption.
        File note in the file header.

        :return: The file_note of this RvmSaveOption.
        :rtype: str
        """
        return self.container['file_note']

    @file_note.setter
    def file_note(self, file_note):
        """
        Sets the file_note of this RvmSaveOption.
        File note in the file header.

        :param file_note: The file_note of this RvmSaveOption.
        :type: str
        """

        self.container['file_note'] = file_note

    @property
    def author(self):
        """
        Gets the author of this RvmSaveOption.
        Author information, default value is '3d@aspose'.

        :return: The author of this RvmSaveOption.
        :rtype: str
        """
        return self.container['author']

    @author.setter
    def author(self, author):
        """
        Sets the author of this RvmSaveOption.
        Author information, default value is '3d@aspose'.

        :param author: The author of this RvmSaveOption.
        :type: str
        """

        self.container['author'] = author

    @property
    def creation_time(self):
        """
        Gets the creation_time of this RvmSaveOption.
        The timestamp that exported this file, default value is current time.

        :return: The creation_time of this RvmSaveOption.
        :rtype: str
        """
        return self.container['creation_time']

    @creation_time.setter
    def creation_time(self, creation_time):
        """
        Sets the creation_time of this RvmSaveOption.
        The timestamp that exported this file, default value is current time.

        :param creation_time: The creation_time of this RvmSaveOption.
        :type: str
        """

        self.container['creation_time'] = creation_time

    @property
    def file_content_type(self):
        """
        Gets the file_content_type of this RvmSaveOption.
        Gets or sets  of the FileContent Style.

        :return: The file_content_type of this RvmSaveOption.
        :rtype: FileContentType
        """
        return self.container['file_content_type']

    @file_content_type.setter
    def file_content_type(self, file_content_type):
        """
        Sets the file_content_type of this RvmSaveOption.
        Gets or sets  of the FileContent Style.

        :param file_content_type: The file_content_type of this RvmSaveOption.
        :type: FileContentType
        """

        self.container['file_content_type'] = file_content_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RvmSaveOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
